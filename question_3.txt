By default do django signals run in the same database transaction as the caller? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.

Yes. Django signals run in the same database transaction by default. 

```{python}
from django.db import transaction
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError

# decorator @receiver connects signal (post_save) with model (User) to this function
@receiver(post_save, sender=User)
def my_handler(sender, instance, **kwargs):
    # simulating an error that would roll back the transaction
    raise ValidationError("Triggering rollback")
```

Therefore, in this code snippet, I state that Django signals run in the same database transaction by default because when the 'ValidationError' is raised, this will trigger rollback if it's within a database transaction. If this error is not caught, this means the User instance will not be saved to the database, and no partial updates will happen, demonstrating that the signal runs in the same transaction as the caller. 